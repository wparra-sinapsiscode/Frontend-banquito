import React, { useState } from 'react';
import './Settings.css';

const Settings = ({ settings, setSettings, loans = [] }) => {
  const [activeSection, setActiveSection] = useState('general');
  const [tempSettings, setTempSettings] = useState(settings);
  const [hasChanges, setHasChanges] = useState(false);

  const handleSettingChange = (section, key, value) => {
    const newSettings = {
      ...tempSettings,
      [section]: {
        ...tempSettings[section],
        [key]: value
      }
    };
    setTempSettings(newSettings);
    setHasChanges(JSON.stringify(newSettings) !== JSON.stringify(settings));
  };

  const handleDirectChange = (key, value) => {
    const newSettings = {
      ...tempSettings,
      [key]: value
    };
    setTempSettings(newSettings);
    setHasChanges(JSON.stringify(newSettings) !== JSON.stringify(settings));
  };

  const saveSettings = () => {
    setSettings(tempSettings);
    setHasChanges(false);
    alert('Configuraci√≥n guardada exitosamente');
  };

  const resetSettings = () => {
    setTempSettings(settings);
    setHasChanges(false);
  };

  const restoreDefaults = () => {
    const defaultSettings = {
      shareValue: 500,
      loanLimits: {
        individual: 8000,
        guaranteePercentage: 80
      },
      monthlyInterestRates: {
        high: 3,
        medium: 5,
        low: 10
      },
      operationDay: 'wednesday',
      delinquencyRate: 5.0
    };
    setTempSettings(defaultSettings);
    setHasChanges(true);
  };

  const renderGeneralSettings = () => (
    <div className="settings-section">
      <h3>‚öôÔ∏è Configuraci√≥n General</h3>
      
      <div className="setting-group">
        <h4>üí∞ Valor de Acciones</h4>
        <div className="setting-item">
          <label htmlFor="shareValue">Valor por acci√≥n (S/):</label>
          <input
            type="number"
            id="shareValue"
            value={tempSettings.shareValue}
            onChange={(e) => handleDirectChange('shareValue', parseInt(e.target.value) || 0)}
            min="100"
            max="2000"
            step="50"
          />
          <small>Valor en soles de cada acci√≥n de garant√≠a</small>
        </div>
      </div>

      <div className="setting-group">
        <h4>üìÖ D√≠a de Operaciones</h4>
        <div className="setting-item">
          <label htmlFor="operationDay">D√≠a de la semana:</label>
          <select
            id="operationDay"
            value={tempSettings.operationDay}
            onChange={(e) => handleDirectChange('operationDay', e.target.value)}
          >
            <option value="monday">Lunes</option>
            <option value="tuesday">Martes</option>
            <option value="wednesday">Mi√©rcoles</option>
            <option value="thursday">Jueves</option>
            <option value="friday">Viernes</option>
            <option value="saturday">S√°bado</option>
          </select>
          <small>D√≠a designado para pagos y desembolsos</small>
        </div>
      </div>

      <div className="setting-group">
        <h4>üèõÔ∏è L√≠mites de Pr√©stamo</h4>
        <div className="setting-item">
          <label htmlFor="individualLimit">L√≠mite individual m√°ximo (S/):</label>
          <input
            type="number"
            id="individualLimit"
            value={tempSettings.loanLimits.individual}
            onChange={(e) => handleSettingChange('loanLimits', 'individual', parseInt(e.target.value) || 0)}
            min="1000"
            max="20000"
            step="500"
          />
          <small>L√≠mite m√°ximo de pr√©stamo por persona</small>
        </div>
        
        <div className="setting-item">
          <label htmlFor="guaranteePercentage">Porcentaje de garant√≠a (%):</label>
          <input
            type="number"
            id="guaranteePercentage"
            value={tempSettings.loanLimits.guaranteePercentage}
            onChange={(e) => handleSettingChange('loanLimits', 'guaranteePercentage', parseInt(e.target.value) || 0)}
            min="50"
            max="100"
            step="5"
          />
          <small>Porcentaje m√°ximo de la garant√≠a que se puede prestar</small>
        </div>
      </div>
    </div>
  );

  const renderInterestSettings = () => (
    <div className="settings-section">
      <h3>üìà Configuraci√≥n de Tasas de Inter√©s</h3>
      
      <div className="rates-info">
        <div className="info-card">
          <h4>‚ÑπÔ∏è Informaci√≥n sobre Tasas</h4>
          <p>Las tasas de inter√©s se aplican seg√∫n el monto del pr√©stamo solicitado. 
             Las tasas son anuales y se calculan autom√°ticamente en las cuotas mensuales.</p>
        </div>
      </div>

      <div className="setting-group">
        <h4>üí∏ Tasas por Monto de Pr√©stamo</h4>
        
        <div className="rate-setting-item high">
          <div className="rate-header">
            <span className="rate-label">üü¢ Pr√©stamos Grandes (m√°s de S/ 5,000)</span>
            <span className="rate-description">Tasa preferencial para montos altos</span>
          </div>
          <div className="rate-input">
            <input
              type="number"
              value={tempSettings.monthlyInterestRates.high}
              onChange={(e) => handleSettingChange('monthlyInterestRates', 'high', parseFloat(e.target.value) || 0)}
              min="1"
              max="15"
              step="0.5"
            />
            <span className="rate-unit">% mensual</span>
          </div>
        </div>

        <div className="rate-setting-item medium">
          <div className="rate-header">
            <span className="rate-label">üü° Pr√©stamos Medianos (S/ 1,000 - 5,000)</span>
            <span className="rate-description">Tasa est√°ndar para montos intermedios</span>
          </div>
          <div className="rate-input">
            <input
              type="number"
              value={tempSettings.monthlyInterestRates.medium}
              onChange={(e) => handleSettingChange('monthlyInterestRates', 'medium', parseFloat(e.target.value) || 0)}
              min="2"
              max="20"
              step="0.5"
            />
            <span className="rate-unit">% mensual</span>
          </div>
        </div>

        <div className="rate-setting-item low">
          <div className="rate-header">
            <span className="rate-label">üî¥ Pr√©stamos Peque√±os (menos de S/ 1,000)</span>
            <span className="rate-description">Tasa m√°s alta para montos peque√±os</span>
          </div>
          <div className="rate-input">
            <input
              type="number"
              value={tempSettings.monthlyInterestRates.low}
              onChange={(e) => handleSettingChange('monthlyInterestRates', 'low', parseFloat(e.target.value) || 0)}
              min="5"
              max="30"
              step="0.5"
            />
            <span className="rate-unit">% mensual</span>
          </div>
        </div>
      </div>

      <div className="setting-group">
        <h4>‚ö†Ô∏è Recargo por Mora</h4>
        <div className="delinquency-info">
          <div className="info-card warning">
            <h5>‚ÑπÔ∏è ¬øQu√© es el Recargo por Mora?</h5>
            <p>El recargo por mora es un porcentaje adicional que se aplica autom√°ticamente al pago mensual 
               cuando un pr√©stamo se vence. Se calcula por cada d√≠a de retraso hasta que se realice el pago.</p>
          </div>
        </div>
        
        <div className="rate-setting-item delinquency">
          <div className="rate-header">
            <span className="rate-label">üí∏ Tasa de Recargo por Mora</span>
            <span className="rate-description">Porcentaje aplicado diariamente sobre el pago vencido</span>
          </div>
          <div className="rate-input">
            <input
              type="number"
              value={tempSettings.delinquencyRate}
              onChange={(e) => handleDirectChange('delinquencyRate', parseFloat(e.target.value) || 0)}
              min="0"
              max="50"
              step="0.5"
            />
            <span className="rate-unit">% diario</span>
          </div>
        </div>

        <div className="delinquency-status">
          <div className="status-indicator">
            <span className="status-label">Ejemplo de C√°lculo:</span>
            <span className="status-value normal">
              üìã Ver simulaci√≥n abajo
            </span>
          </div>
          <div className="mora-example">
            <h6>üí° Ejemplo de Recargo por Mora</h6>
            <div className="example-calc">
              <div className="calc-row">
                <span>Cuota original:</span>
                <span>S/ 250.00</span>
              </div>
              <div className="calc-row">
                <span>Tasa de recargo configurada:</span>
                <span>{tempSettings.delinquencyRate}%</span>
              </div>
              <div className="calc-row">
                <span>D√≠as de retraso:</span>
                <span>5 d√≠as</span>
              </div>
              <div className="calc-row highlight">
                <span>Recargo por mora ({tempSettings.delinquencyRate}% √ó 5 d√≠as):</span>
                <span>S/ {Math.ceil(250 * (tempSettings.delinquencyRate / 100) * 5)}</span>
              </div>
              <div className="calc-row total">
                <span><strong>Total a pagar:</strong></span>
                <span><strong>S/ {Math.ceil(250 + (250 * (tempSettings.delinquencyRate / 100) * 5))}</strong></span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="rates-simulation">
        <h4>üßÆ Simulador de Tasas</h4>
        <div className="simulation-grid">
          <div className="simulation-card">
            <h5>M√°s de S/ 5,000</h5>
            <div className="simulation-input">
              <label>Monto del pr√©stamo:</label>
              <input
                type="number"
                value={tempSettings.simulatorAmounts?.high || 7000}
                onChange={(e) => {
                  const value = parseInt(e.target.value) || 5001;
                  setTempSettings({
                    ...tempSettings,
                    simulatorAmounts: {
                      ...tempSettings.simulatorAmounts,
                      high: value
                    }
                  });
                  setHasChanges(true);
                }}
                min="5001"
                max="50000"
                step="100"
              />
            </div>
            <p>Tasa aplicable: <strong>{tempSettings.monthlyInterestRates.high}% semanal</strong></p>
            <p>Cuota semanal (12 semanal): <strong>S/ {Math.ceil(calculateMonthlyPayment(tempSettings.simulatorAmounts?.high || 7000, 12, tempSettings.monthlyInterestRates.high))}</strong></p>
          </div>
          <div className="simulation-card">
            <h5>S/ 1,000 - 5,000</h5>
            <div className="simulation-input">
              <label>Monto del pr√©stamo:</label>
              <input
                type="number"
                value={tempSettings.simulatorAmounts?.medium || 3000}
                onChange={(e) => {
                  const value = parseInt(e.target.value) || 1001;
                  setTempSettings({
                    ...tempSettings,
                    simulatorAmounts: {
                      ...tempSettings.simulatorAmounts,
                      medium: Math.min(4999, Math.max(1001, value))
                    }
                  });
                  setHasChanges(true);
                }}
                min="1001"
                max="4999"
                step="100"
              />
            </div>
            <p>Tasa aplicable: <strong>{tempSettings.monthlyInterestRates.medium}% semanal</strong></p>
            <p>Cuota semanal (12 semanal): <strong>S/ {Math.ceil(calculateMonthlyPayment(tempSettings.simulatorAmounts?.medium || 3000, 12, tempSettings.monthlyInterestRates.medium))}</strong></p>
          </div>
          <div className="simulation-card">
            <h5>Menos o igual de S/ 1,000</h5>
            <div className="simulation-input">
              <label>Monto del pr√©stamo:</label>
              <input
                type="number"
                value={tempSettings.simulatorAmounts?.low || 800}
                onChange={(e) => {
                  const value = parseInt(e.target.value) || 100;
                  setTempSettings({
                    ...tempSettings,
                    simulatorAmounts: {
                      ...tempSettings.simulatorAmounts,
                      low: Math.min(1000, Math.max(100, value))
                    }
                  });
                  setHasChanges(true);
                }}
                min="100"
                max="1000"
                step="50"
              />
            </div>
            <p>Tasa aplicable: <strong>{tempSettings.monthlyInterestRates.low}% semanal</strong></p>
            <p>Cuota semanal (6 semanal): <strong>S/ {Math.ceil(calculateMonthlyPayment(tempSettings.simulatorAmounts?.low || 800, 6, tempSettings.monthlyInterestRates.low))}</strong></p>
          </div>
        </div>
      </div>
    </div>
  );

  const renderSecuritySettings = () => (
    <div className="settings-section">
      <h3>üîí Configuraci√≥n de Seguridad</h3>
      
      <div className="setting-group">
        <h4>üë• Gesti√≥n de Usuarios</h4>
        <div className="security-info">
          <div className="info-item">
            <span className="info-label">Usuarios activos:</span>
            <span className="info-value">3 (1 Admin, 2 Miembros)</span>
          </div>
          <div className="info-item">
            <span className="info-label">√öltimo acceso admin:</span>
            <span className="info-value">Hoy, {new Date().toLocaleTimeString('es-ES')}</span>
          </div>
        </div>
        
        <div className="security-actions">
          <button className="security-btn">
            üë§ Gestionar usuarios
          </button>
          <button className="security-btn">
            üîë Cambiar contrase√±as
          </button>
        </div>
      </div>

      <div className="setting-group">
        <h4>üìä Auditor√≠a y Logs</h4>
        <div className="audit-info">
          <p>Sistema de auditor√≠a para rastrear cambios importantes:</p>
          <ul>
            <li>‚úÖ Cambios en configuraci√≥n</li>
            <li>‚úÖ Aprobaci√≥n/rechazo de pr√©stamos</li>
            <li>‚úÖ Modificaciones de calificaci√≥n crediticia</li>
            <li>‚úÖ Registro de pagos</li>
          </ul>
        </div>
        
        <div className="audit-actions">
          <button className="audit-btn">
            üìã Ver logs de auditor√≠a
          </button>
          <button className="audit-btn">
            üíæ Exportar logs
          </button>
        </div>
      </div>

      <div className="setting-group">
        <h4>üîê Respaldo y Recuperaci√≥n</h4>
        <div className="backup-info">
          <div className="info-item">
            <span className="info-label">√öltimo respaldo:</span>
            <span className="info-value">Ayer, 23:00</span>
          </div>
          <div className="info-item">
            <span className="info-label">Respaldos autom√°ticos:</span>
            <span className="info-value">Activados (diarios)</span>
          </div>
        </div>
        
        <div className="backup-actions">
          <button className="backup-btn primary">
            üíæ Crear respaldo manual
          </button>
          <button className="backup-btn">
            üì• Restaurar respaldo
          </button>
        </div>
      </div>
    </div>
  );

  const renderAdvancedSettings = () => (
    <div className="settings-section">
      <h3>üîß Configuraci√≥n Avanzada</h3>
      
      <div className="setting-group">
        <h4>üìß Notificaciones</h4>
        <div className="checkbox-group">
          <label className="checkbox-item">
            <input type="checkbox" defaultChecked />
            <span className="checkbox-label">Notificar vencimientos pr√≥ximos</span>
          </label>
          <label className="checkbox-item">
            <input type="checkbox" defaultChecked />
            <span className="checkbox-label">Alertas de pagos vencidos</span>
          </label>
          <label className="checkbox-item">
            <input type="checkbox" defaultChecked />
            <span className="checkbox-label">Notificar nuevas solicitudes</span>
          </label>
          <label className="checkbox-item">
            <input type="checkbox" />
            <span className="checkbox-label">Enviar reportes semanales por email</span>
          </label>
        </div>
      </div>

      <div className="setting-group">
        <h4>üé® Personalizaci√≥n</h4>
        <div className="theme-selector">
          <label htmlFor="theme">Tema de la aplicaci√≥n:</label>
          <select id="theme">
            <option value="default">üé® Tema por defecto</option>
            <option value="dark">üåô Tema oscuro</option>
            <option value="high-contrast">üîÜ Alto contraste</option>
          </select>
        </div>
      </div>

      <div className="setting-group">
        <h4>‚ö° Rendimiento</h4>
        <div className="performance-settings">
          <div className="setting-item">
            <label htmlFor="cacheSize">Tama√±o de cach√© (MB):</label>
            <input
              type="number"
              id="cacheSize"
              defaultValue="50"
              min="10"
              max="200"
              step="10"
            />
            <small>Memoria utilizada para mejorar velocidad</small>
          </div>
          
          <div className="setting-item">
            <label htmlFor="autoSave">Guardado autom√°tico:</label>
            <select id="autoSave">
              <option value="30">Cada 30 segundos</option>
              <option value="60">Cada minuto</option>
              <option value="300">Cada 5 minutos</option>
              <option value="0">Desactivado</option>
            </select>
            <small>Frecuencia de guardado autom√°tico</small>
          </div>
        </div>
      </div>

      <div className="danger-zone">
        <h4>‚ö†Ô∏è Zona de Peligro</h4>
        <div className="danger-actions">
          <button className="danger-btn" onClick={() => {
            if (window.confirm('¬øEst√°s seguro de que quieres resetear todas las configuraciones? Esta acci√≥n no se puede deshacer.')) {
              restoreDefaults();
            }
          }}>
            üîÑ Resetear toda la configuraci√≥n
          </button>
          <button className="danger-btn" onClick={() => {
            if (window.confirm('¬øEst√°s seguro de que quieres limpiar todos los datos? Esta acci√≥n eliminar√° TODA la informaci√≥n y no se puede deshacer.')) {
              alert('Funcionalidad de limpieza de datos no implementada en la demo');
            }
          }}>
            üóëÔ∏è Limpiar todos los datos
          </button>
        </div>
      </div>
    </div>
  );

  const getCurrentDelinquencyRate = () => {
    if (!loans || loans.length === 0) return 0;
    
    const today = new Date();
    const overdueLoans = loans.filter(loan => {
      const dueDate = new Date(loan.dueDate);
      return dueDate < today && loan.status !== 'paid';
    });
    
    return (overdueLoans.length / loans.length) * 100;
  };

  function calculateMonthlyPayment(principal, months, annualRate) {
    const monthlyRate = annualRate / 100 / 12;
    const monthlyPayment = (principal * monthlyRate * Math.pow(1 + monthlyRate, months)) / 
                          (Math.pow(1 + monthlyRate, months) - 1);
    return Math.round(monthlyPayment * 100) / 100;
  }

  return (
    <div className="settings-container">
      <div className="settings-header">
        <h2>üîß Configuraci√≥n del Sistema</h2>
        {hasChanges && (
          <div className="changes-indicator">
            <span className="changes-text">‚úèÔ∏è Cambios sin guardar</span>
            <div className="changes-actions">
              <button className="save-btn" onClick={saveSettings}>
                üíæ Guardar
              </button>
              <button className="reset-btn" onClick={resetSettings}>
                ‚Ü∫ Descartar
              </button>
            </div>
          </div>
        )}
      </div>

      <div className="settings-tabs">
        <button 
          className={`settings-tab ${activeSection === 'general' ? 'active' : ''}`}
          onClick={() => setActiveSection('general')}
        >
          ‚öôÔ∏è General
        </button>
        <button 
          className={`settings-tab ${activeSection === 'interest' ? 'active' : ''}`}
          onClick={() => setActiveSection('interest')}
        >
          üìà Tasas de Inter√©s
        </button>
        <button 
          className={`settings-tab ${activeSection === 'security' ? 'active' : ''}`}
          onClick={() => setActiveSection('security')}
        >
          üîí Seguridad
        </button>
        <button 
          className={`settings-tab ${activeSection === 'advanced' ? 'active' : ''}`}
          onClick={() => setActiveSection('advanced')}
        >
          üîß Avanzado
        </button>
      </div>

      <div className="settings-content">
        {activeSection === 'general' && renderGeneralSettings()}
        {activeSection === 'interest' && renderInterestSettings()}
        {activeSection === 'security' && renderSecuritySettings()}
        {activeSection === 'advanced' && renderAdvancedSettings()}
      </div>

      <div className="settings-footer">
        <div className="footer-info">
          <span>üèõÔ∏è Sistema Banquito v1.0</span>
          <span>√öltima actualizaci√≥n: {new Date().toLocaleDateString('es-ES')}</span>
        </div>
        <div className="footer-actions">
          <button className="footer-btn" onClick={restoreDefaults}>
            üîÑ Valores por defecto
          </button>
          <button className="footer-btn primary" onClick={saveSettings} disabled={!hasChanges}>
            üíæ Guardar configuraci√≥n
          </button>
        </div>
      </div>
    </div>
  );
};

export default Settings;